import os
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, CallbackContext,
    CallbackQueryHandler, ConversationHandler
)

# –°—Ç–∞–Ω–∏
CHECK_SUB, CHOOSE_ROLE, GUEST_NAME, GUEST_AGE, GUEST_CITY, GUEST_FIELD, GUEST_CONTACT = range(7)
PARTNER_COMPANY, PARTNER_FIELD, PARTNER_CITY, PARTNER_CONTACT = range(7, 11)

# –î–∞–Ω—ñ
ADMIN_CHAT_ID = 695255312
CHANNEL_USERNAME = "bud_toloka"
TOKEN = os.environ.get("BOT_TOKEN")


logging.basicConfig(level=logging.INFO)

def check_subscription(user_id):
    url = f"https://api.telegram.org/bot{TOKEN}/getChatMember?chat_id=@{CHANNEL_USERNAME}&user_id={user_id}"
    response = requests.get(url).json()
    status = response.get("result", {}).get("status")
    return status in ["member", "administrator", "creator"]

def start(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    if check_subscription(user_id):
        return ask_role(update, context)
    else:
        keyboard = [[InlineKeyboardButton("–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è ‚úÖ", callback_data="check_sub")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            "–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/bud_toloka\n\n"
            "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
            reply_markup=reply_markup
        )
        return CHECK_SUB

def check_sub(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    if check_subscription(query.from_user.id):
        return ask_role(query, context)
    else:
        query.edit_message_text("–ù–∞ –∂–∞–ª—å, –≤–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return CHECK_SUB

def ask_role(update_or_query, context: CallbackContext) -> int:
    keyboard = [
        [InlineKeyboardButton("–ì—ñ—Å—Ç—å", callback_data="guest")],
        [InlineKeyboardButton("–ë—ñ–∑–Ω–µ—Å-–ø–∞—Ä—Ç–Ω–µ—Ä", callback_data="partner")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = (
        "–í—ñ—Ç–∞—î–º–æ!\n\n"
        "–ó –Ω–∞–≥–æ–¥–∏ —Ä—ñ—á–Ω–∏—Ü—ñ –Ω–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É, –º–∏ –≥–æ—Ç—É—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –ø—Ä–∞–≥–Ω–µ —Ä–æ–∑–≤–∏–≤–∞—Ç–∏—Å—å —É –±—É–¥—ñ–≤–µ–ª—å–Ω—ñ–π —Å—Ñ–µ—Ä—ñ.\n\n"
        "–ë–∞–∂–∞—î—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è?\n\n"
        "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫—É –∞–Ω–∫–µ—Ç—É –Ω–∏–∂—á–µüëá"
    )
    if isinstance(update_or_query, Update):
        update_or_query.message.reply_text(text, reply_markup=reply_markup)
    else:
        update_or_query.edit_message_text(text, reply_markup=reply_markup)
    return CHOOSE_ROLE

def choose_role(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    role = query.data
    if role == "guest":
        context.user_data["role"] = "–ì—ñ—Å—Ç—å"
        query.edit_message_text("–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
        return GUEST_NAME
    else:
        context.user_data["role"] = "–ë—ñ–∑–Ω–µ—Å-–ø–∞—Ä—Ç–Ω–µ—Ä"
        query.edit_message_text("–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó:")
        return PARTNER_COMPANY

# –ê–Ω–∫–µ—Ç–∞ –ì—ñ—Å—Ç—å
def guest_name(update: Update, context: CallbackContext) -> int:
    context.user_data["name"] = update.message.text.strip()
    update.message.reply_text("–°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?")
    return GUEST_AGE

def guest_age(update: Update, context: CallbackContext) -> int:
    context.user_data["age"] = update.message.text.strip()
    update.message.reply_text("–ó —è–∫–æ–≥–æ –≤–∏ –º—ñ—Å—Ç–∞?")
    return GUEST_CITY

def guest_city(update: Update, context: CallbackContext) -> int:
    context.user_data["city"] = update.message.text.strip()
    update.message.reply_text("–Ø–∫–∞ –≤–∞—à–∞ —Å—Ñ–µ—Ä–∞ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ?")
    return GUEST_FIELD

def guest_field(update: Update, context: CallbackContext) -> int:
    context.user_data["field"] = update.message.text.strip()
    update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤ º—è–∑–∫—É:")
    return GUEST_CONTACT

def guest_contact(update: Update, context: CallbackContext) -> int:
    context.user_data["contact"] = update.message.text.strip()
    send_data(update, context)
    update.message.reply_text("üì© –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ! –ù–µ–∑–∞–±–∞—Ä–æ–º –º–∏ –∑ –≤–∞–º–∏ –∑–≤ º—è–∂–µ–º–æ—Å—å —ñ –Ω–∞–¥–∞–º–æ –≤—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.")
    return ConversationHandler.END

# –ê–Ω–∫–µ—Ç–∞ –ë—ñ–∑–Ω–µ—Å-–ø–∞—Ä—Ç–Ω–µ—Ä
def partner_company(update: Update, context: CallbackContext) -> int:
    context.user_data["company"] = update.message.text.strip()
    update.message.reply_text("–°—Ñ–µ—Ä–∞ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ:")
    return PARTNER_FIELD

def partner_field(update: Update, context: CallbackContext) -> int:
    context.user_data["field"] = update.message.text.strip()
    update.message.reply_text("–ú—ñ—Å—Ç–æ –≤ —è–∫–æ–º—É –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∫–æ–º–ø–∞–Ω—ñ—è:")
    return PARTNER_CITY

def partner_city(update: Update, context: CallbackContext) -> int:
    context.user_data["city"] = update.message.text.strip()
    update.message.reply_text("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤ º—è–∑–∫—É:")
    return PARTNER_CONTACT

def partner_contact(update: Update, context: CallbackContext) -> int:
    context.user_data["contact"] = update.message.text.strip()
    send_data(update, context)
    update.message.reply_text("üì© –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ! –ù–µ–∑–∞–±–∞—Ä–æ–º –º–∏ –∑ –≤–∞–º–∏ –∑–≤ º—è–∂–µ–º–æ—Å—å —ñ –Ω–∞–¥–∞–º–æ –≤—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.")
    return ConversationHandler.END

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —ñ–Ω—Ñ–∏ –∞–¥–º—ñ–Ω—É
def send_data(update: Update, context: CallbackContext):
    data = context.user_data
    user = update.effective_user
    username = user.username
    user_link = f"[{user.full_name}](https://t.me/{username})" if username else f"{user.full_name} (—é–∑–µ—Ä–Ω–µ–π–º –≤—ñ–¥—Å—É—Ç–Ω—ñ–π)"
    user_id = user.id

    text = f"üì¨ *–ù–æ–≤–∞ –∞–Ω–∫–µ—Ç–∞: {data['role']}*\n"
    text += f"üë§ *–ü—Ä–æ—Ñ—ñ–ª—å:* {user_link}\n"
    text += f"üÜî *User ID:* `{user_id}`\n"
    text += f"üîó *Username:* @{username if username else '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π'}\n\n"

    if data["role"] == "–ì—ñ—Å—Ç—å":
        text += (
            f"üë§ –Ü–º'—è: {data['name']}\n"
            f"üéÇ –í—ñ–∫: {data['age']}\n"
            f"üèô –ú—ñ—Å—Ç–æ: {data['city']}\n"
            f"üíº –°—Ñ–µ—Ä–∞: {data['field']}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}"
        )
    else:
        text += (
            f"üè¢ –ö–æ–º–ø–∞–Ω—ñ—è: {data['company']}\n"
            f"üíº –°—Ñ–µ—Ä–∞: {data['field']}\n"
            f"üèô –ú—ñ—Å—Ç–æ: {data['city']}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}"
        )
    context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=text, parse_mode='Markdown')

def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("–ê–Ω–∫–µ—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHECK_SUB: [CallbackQueryHandler(check_sub, pattern='check_sub')],
            CHOOSE_ROLE: [CallbackQueryHandler(choose_role)],
            GUEST_NAME: [MessageHandler(Filters.text & ~Filters.command, guest_name)],
            GUEST_AGE: [MessageHandler(Filters.text & ~Filters.command, guest_age)],
            GUEST_CITY: [MessageHandler(Filters.text & ~Filters.command, guest_city)],
            GUEST_FIELD: [MessageHandler(Filters.text & ~Filters.command, guest_field)],
            GUEST_CONTACT: [MessageHandler(Filters.text & ~Filters.command, guest_contact)],
            PARTNER_COMPANY: [MessageHandler(Filters.text & ~Filters.command, partner_company)],
            PARTNER_FIELD: [MessageHandler(Filters.text & ~Filters.command, partner_field)],
            PARTNER_CITY: [MessageHandler(Filters.text & ~Filters.command, partner_city)],
            PARTNER_CONTACT: [MessageHandler(Filters.text & ~Filters.command, partner_contact)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True,
    )

    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
